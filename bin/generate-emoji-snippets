#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
from logging import basicConfig, getLogger


def parse_arguments():
    parser = argparse.ArgumentParser(description="Generate Emoji snippets")
    parser.add_argument("output_dir", help="Path for generating snippets")
    parser.add_argument(
        "--clean", help="Clean output_dir before generating", action="store_true"
    )
    return parser.parse_args()


def emoji_snippet(emoji, desc):
    snippet = ""
    snippet += "# -*- mode: snippet -*-\n"
    snippet += "# name: :{}: - {}\n".format(emoji, desc)
    snippet += "# key: emoji\n"
    snippet += "# --\n"
    snippet += ":{}: ".format(emoji)

    return snippet


def main():
    basicConfig()
    logger = getLogger(__name__)

    args = parse_arguments()

    if args.clean:
        logger.warn("Remove {}".format(args.output_dir))
        shutil.rmtree(args.output_dir)
    os.makedirs(args.output_dir, exist_ok=True)

    subprocess.run(["gitmoji", "--update"])
    result = subprocess.run(["gitmoji", "--list"], stdout=subprocess.PIPE)
    for line in result.stdout.decode("utf-8").strip().split("\n"):
        cols = line.split("-")
        emoji = cols[1].split(":")[1]
        desc = cols[2].strip()

        fpath = os.path.join(args.output_dir, emoji)
        with open(fpath, "w") as f:
            f.write(emoji_snippet(emoji, desc))
        print("Generated: {}".format(emoji))


if __name__ == "__main__":
    main()
