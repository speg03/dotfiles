#!/bin/bash
#
# Install my custom dotfiles


### Checking require packages are installed

require_packages=""
for package in curl git go tmux zsh; do
    if ! type $package &>/dev/null; then
        require_packages="$require_packages $package"
    fi
done

if [[ $require_packages ]]; then
    echo "!!! Require packages:$require_packages"
    exit 1
fi


### Download dotfiles

dotfiles_path="$HOME/.local/src/github.com/speg03/dotfiles"
if [[ ! -e $dotfiles_path ]]; then
    echo -n "Downloading dotfiles ... "
    git clone -q https://github.com/speg03/dotfiles "$dotfiles_path"
    echo "Done."
fi


### Create symlinks

symlink() {
    local src_path=$1
    local dst_path=$2

    if [[ ! -h $dst_path && -e $dst_path ]]; then
        # 宛先がシンボリックリンク以外で存在する場合
        echo "$(basename "$dst_path") already exists."
    elif [[ ! -e $dst_path ]]; then
        # 宛先が存在しない場合
        # またはシンボリックリンクでそのリンク先が存在しない場合
        echo -n "Creating link $(basename "$dst_path") ... "
        ln -snf "$src_path" "$dst_path"
        echo "Done."
    fi
    # 宛先がシンボリックリンクとして存在した場合は何もしない
}

# symlinks for config
for src in $dotfiles_path/config/*; do
    symlink "$src" "$HOME/.config/$(basename "$src")"
done

# symlinks for rcs
for src in $dotfiles_path/rcs/*; do
    symlink "$src" "$HOME/.$(basename "$src")"
done

# symlinks for bin
mkdir -p "$HOME/.local/bin"
for src in $dotfiles_path/bin/*; do
    symlink "$src" "$HOME/.local/bin/$(basename "$src")"
done


### Download completions

zsh_completions_path="$HOME/.local/share/zsh/completions"
mkdir -p "$zsh_completions_path"

# git completion
if [[ ! -e $zsh_completions_path/_git ]]; then
    echo -n "Downloading completions for git ... "
    curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh -o "$zsh_completions_path/_git"
    curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o "$zsh_completions_path/git-completion.bash"
    echo "Done."
fi

# docker completion
if [[ ! -e $zsh_completions_path/_docker ]]; then
    echo -n "Downloading completion for docker ... "
    curl -s https://raw.githubusercontent.com/docker/docker/master/contrib/completion/zsh/_docker -o "$zsh_completions_path/_docker"
    echo "Done."
fi


### Create templates

# git config
git_config_path="$HOME/.config/git/gitconfig.local"
if [[ ! -e $git_config_path ]]; then
    echo -n "Creating git configuration for local ... "
    git config -f "$git_config_path" user.name 'Takahiro Yano'
    git config -f "$git_config_path" user.email 'speg03@gmail.com'
    echo "Done."
fi

# netrc template
netrc_path="$HOME/.netrc"
if [[ ! -e $netrc_path ]]; then
    echo -n "Creating netrc template ... "
    {
        echo "#machine github.com"
        echo "#  login speg03"
        echo "#  password ACCESS_TOKEN"
    } >"$netrc_path"
    chmod 0600 "$netrc_path"
    echo "Done."
fi


### Install useful tools

# anyenv
export ANYENV_ROOT=${ANYENV_ROOT:-"$HOME/.anyenv"}
if [[ ! -e $ANYENV_ROOT ]]; then
    echo -n "Installing anyenv ... "
    git clone -q https://github.com/riywo/anyenv "$ANYENV_ROOT"
    git clone -q https://github.com/znz/anyenv-update "$ANYENV_ROOT/plugins/anyenv-update"
    echo "Done."
fi

# pyenv
if [[ ! -e $ANYENV_ROOT/envs/pyenv ]]; then
    echo -n "Loading anyenv ... "
    eval "$("$ANYENV_ROOT/bin/anyenv" init -)"
    echo "Done."

    echo -n "Installing pyenv ... "
    anyenv install pyenv &>/dev/null
    git clone -q https://github.com/yyuu/pyenv-virtualenv.git "$ANYENV_ROOT/envs/pyenv/plugins/pyenv-virtualenv"
    echo "Done."
fi

# fzf
fzf_path="$HOME/.fzf"
if [[ ! -e $fzf_path ]]; then
    echo -n "Installing fzf ... "
    git clone -q https://github.com/junegunn/fzf "$fzf_path"
    "$fzf_path/install" --bin
    echo "Done."
fi

# tpm
tmux_plugins_path="$HOME/.local/share/tmux/plugins"
if [[ ! -e $tmux_plugins_path/tpm ]]; then
    echo "Installing tpm ..."
    git clone -q https://github.com/tmux-plugins/tpm "$tmux_plugins_path/tpm"
    "$tmux_plugins_path/tpm/bin/install_plugins"
    echo "Done."
fi

# Go packages
export GOPATH=${GOPATH:-"$HOME/.go"}

# ghq
if [[ ! -e $GOPATH/bin/ghq ]]; then
    echo -n "Installing ghq ... "
    go get github.com/motemen/ghq
    echo "Done."
fi
